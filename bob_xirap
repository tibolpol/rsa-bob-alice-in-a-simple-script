#!/bin/bash
mydir=$(dirname "$0")
myname=$(basename "$0")
IFS=_ read ROLE SUFFIX <<< $myname
myexit(){
  rc=$1;shift
  echo $myname rc=$rc - $* >&2
  exit $rc
}
_(){ TEXTDOMAIN=beyn TEXTDOMAINDIR="$(readlink -f "$mydir/locale")" gettext "$1"; }
LSIG=49
LCIP=230

while (( $# > 0 ));do #{
zis=$1;shift
if   [[ $zis == -h ]];then
#
# Option -h (help)
#
fmt -s <<END
$myname(1)                                            $myname(1)

$(_ "NOM")
        $myname -  $(_ "Échange de messages chiffrés basé sur") RSA.

$(_ "SYNOPSIS")
        alice_$SUFFIX -[hcdnlubp] | -a [command args ... ]

        bob_$SUFFIX   -[hcdnlu]

$(_ "DESCRIPTION")
        $(_ "Échange de messages chiffrés basé sur") RSA.

        Alice $(_ "et") Bob $(_ "sont respectivement une clé privée et sa clé publique outillées dans un script bash").

        Alice $(_ "peut signer et déchiffrer"), Bob $(_ "peut vérifier et chiffrer").  $(_ "Ils peuvent aussi se répliquer pour créer une nouvelle paire") Alice $(_ "et") Bob, $(_ "identifiée par un suffixe") $(_ "distinctif de la clé").

        $(_ "Le présent script se nomme") $myname $(_ "formé du radical") "$ROLE" $(_ "désignant la clé") $([[ $ROLE == bob ]] && _ "publique" || _ "privée"), $(_ "et du suffixe") "$SUFFIX" $(_ "distinctif de la clé").

        $(_ "Si la longueur du message est inférieure à") $LCIP $(_ "octets, le résultat chiffré par") Bob $(_ "est un texte de") 367 $(_ "octets, au-delà le chiffré est un flux binaire").

        $(_ "Si la longueur du message est inférieure à") $LSIG $(_ "octets, le résultat signé par") Alice $(_ "est un texte de") 365 $(_ "octets, au-delà le chiffré est un flux binaire").

        $(_ "Il n'y a pas de limite à la taille de l'entrée, le chiffrement ou la signature s'effectue en flux").

        $(_ "Le chiffrement ne provoque pas d'inflation du flux"). $(_ "La compression du flux chiffré est inefficace, contrairement au chiffrement du flux compressé").


$(_ "OPTIONS")
        -h
            $(_ "Aide")

        -b
            $(_ "Générer") Bob $(_ "à partir de") Alice.

        -c
            $(_ "Chiffrer") (Bob) $(_ "ou signer") (Alice) $(_ "l'entrée standard").

        -d
            $(_ "Vérifier") (Bob) $(_ "ou déchiffer") (Alice) $(_ "l'entrée standard").

            $(_ "Exemples") :

            $(_ "Signer un message avec") Alice $(_ "et le vérifier avec") Bob :

            [message.out] | alice_$SUFFIX -c | bob_$SUFFIX -d

            $(_ "Chiffrer un message avec") Bob $(_ "et le déchiffrer avec") Alice :

            [message.out] | bob_$SUFFIX -c | alice_$SUFFIX -d

        -a  [command args ...]
            $(_ "Ouvrir la clé privée") Alice $(_ "et l'utiliser dans un sous-shell sans devoir saisir à nouveau la") passphrase.

            $(_ "Exemple") :

            alice_$SUFFIX -a # passphrase $(_ "demandée")
            alice_$SUFFIX -d # passphrase $(_ "non demandée")
            logout # $(_ "Sortie du sous-shell")
            alice_$SUFFIX -d # passphrase $(_ "demandée")

        -l
            $(_ "Empreinte de la clé")

        -p
            $(_ "Changer la") passphrase $(_ "de") Alice

        -n
            $(_ "Générer") Alice $(_ "et") Bob $(_ "avec une nouvelle clé privée et le distinctif formé du premier mot du") digest.

        -u
            $(_ "Update ce script avec la branche") master.


$(_ "STATUT FINAL")
        0 SUCCESS
            $(_ "Succès").

        4 ERROR
            $(_ "Une erreur est signalée").

$(_ "VOIR AUSSI")
        ssh-keygen(1) openssl-pkeyutl(1) mcrypt(1)

  https://github.com/tibolpol/rsa-bob-alice-in-a-simple-script

$myname(1)                                            $myname(1)
END
exit

elif [[ $zis == -a ]];then
  arg+=("$zis")
  if (( $# )) ; then
    command+=("$@")
    shift $#
  else
    command+=("bash")
  fi

else
  arg+=("$zis")
fi
done #}

tmp=$(mktemp -d) &&
trap 'rm -rf $tmp' EXIT

(umask u=rw,g=,o=
cat <<END >$tmp/$SUFFIX
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAsNoLqmZ8CfQTWUG/FhrXjHjWJ2p0eQJ7ZMFuaVQFnanQiNSM0SnU
LyxwxzwpFNeQUQWvVhwUjywzihO71jFpbkumTmRIoVxZX6JxNjnxGW5w7gTUVAEg
nZJdfT23Ldk9LaBW5Egxb3FazP5GAQvJng/NjpNpiXu65B3iYxmeRRVE8/VKOvk2
LDCi3T9cBEw7H9T/ytcuD1Lf1lo1BADrvILVbt3E277t6tn1ZbaZo3G9uJ+0YBtY
tOiw3ZW9p9RMRvOcul1b9sSl6nH/t6w+RS4bHdOwh1uodVXMTk9ugAAzvmC7u+hL
br00rhMhZ8YQbyvG4UttNSWiJKQUcNGgaQIDAQAB
-----END RSA PUBLIC KEY-----
END
)

mycopyscript(){ # merge script + key
  awk '
  $1" "$4 == "-----BEGIN KEY-----" {sta=1}
  $1" "$4 == "-----END KEY-----" {
    while (getline < "'$1'") {
      print
      numlines++
    }
    sta=0
    next
  }
  sta == 0{print}
  END{exit(numlines==0)}'
}
addpayload() { # append data to payload
  printf "%5d%5d%5d" $RANDOM $RANDOM $RANDOM # payload
  cat
}
removepayload(){ # separate data from payload
  tail -c+16
}
mycryptrsa(){ # chiffrement rsa
  if [[ $ROLE == alice ]]; then
    openssl pkeyutl -sign -inkey <(myprivkey)
  else
    openssl pkeyutl -encrypt -pubin -inkey <(
      openssl rsa -RSAPublicKey_in -in $tmp/$SUFFIX -pubout 2>/dev/null)
  fi | base64 -w344
}
mydecryptrsa(){ # déchiffrement rsa
  base64 -d |
  if [[ $ROLE == alice ]]; then
    openssl pkeyutl -decrypt -inkey <(myprivkey)
  else
    openssl pkeyutl -verifyrecover -pubin -inkey <(
      openssl rsa -RSAPublicKey_in -in $tmp/$SUFFIX -pubout 2>/dev/null)
  fi
}
mycrypt(){ # chiffrement stream
  head -c1 >$tmp/next
  if [ -s $tmp/next ];then
    (cat $tmp/next; cat) |
    mcrypt -q -f $1
  fi
}
mydecrypt(){ # déchiffrement stream
  head -c1 >$tmp/next
  if [ -s $tmp/next ];then
    (cat $tmp/next; cat) |
    mdecrypt -q -f $1 # [246-...]
  fi
}
myprivkey(){ # private key
  echo "${!SUFFIX:-$(
    if [[ $SSH_ASKPASS_REQUIRE == force ]] && [ -n "$SSH_ASKPASS" ] ; then
      (openssl rsa -passin fd:$fdi -in $tmp/$SUFFIX 2>/dev/null) {fdi}< <($SSH_ASKPASS)
    else
      openssl rsa -in $tmp/$SUFFIX 2>/dev/null
    fi
  )}"
}
mypubkey(){ # public key
  if [[ $ROLE == alice ]]; then
    umask u=rw,g=,o=
    myprivkey >$tmp/f$SUFFIX &&
    ssh-keygen -e -q -m PEM -f $tmp/f$SUFFIX
    rm -f $tmp/f$SUFFIX
  else
    cat $tmp/$SUFFIX
  fi
}


if [[ $arg == -n ]];then # crée une nouvelle clé
[ -w "$mydir" ] || myexit 8 $(_ "Écriture impossible dans le répertoire") $mydir
rm -f $tmp/$SUFFIX
ssh-keygen -b 2048 -q -m PEM -f $tmp/newkey &&
SUFFIX=$(ssh-keygen -B -f $tmp/newkey | (IFS='[ -]' read P1 P2 P3 && echo $P2 )) &&
[ ! -f $mydir/alice_$SUFFIX ] &&
mycopyscript $tmp/newkey < "$0" > "$mydir/alice_$SUFFIX" &&
chmod u+x,go=  $mydir/alice_$SUFFIX &&
echo $(_ "Le script") $mydir/alice_$SUFFIX $(_ "a été généré et doit rester protégé") >&2 &&
mycopyscript <(ssh-keygen -e -q -m PEM -f $tmp/newkey.pub) < "$0" > "$mydir/bob_$SUFFIX" &&
chmod a+x "$mydir/bob_$SUFFIX" &&
echo "$(_ "Le script") $mydir/bob_$SUFFIX $(_ "a été généré pour être distribué")
$(_ "Exemples") :
echo message | $mydir/alice_$SUFFIX -c | $mydir/bob_$SUFFIX -d # sign, verify
echo message | $mydir/bob_$SUFFIX -c | $mydir/alice_$SUFFIX -d # encrypt, decrypt" >&2


elif [[ $arg == -b ]];then # génération de bob
[[ $ROLE == bob ]] && myexit 8 "$(_ "l'opération $arg n'a pas de sens avec")" Bob
[ -w "${0/alice_/bob_}" ] || myexit 8 $(_ "Écriture impossible sur le fichier") ${0/alice_/bob_}
mycopyscript <(mypubkey) < "$0" > $tmp/new && cat $tmp/new > "${0/alice_/bob_}" && chmod a+x "${0/alice_/bob_}" &&
echo "$(_ "Le script") ${0/alice_/bob_} $(_ "a été généré pour être distribué")
$(_ "Exemples") :
echo message | $0 -c | ${0/alice_/bob_} -d # sign, verify
echo message | ${0/alice_/bob_} -c | $0 -d # encrypt, decrypt" >&2


elif [[ $arg == -l ]];then # empreinte de la clé
ssh-keygen -l -E md5 -f <(ssh-keygen -i -m PEM -f <(mypubkey))


elif [[ $arg == -p ]];then # changement de passphrase
[ -w "$0" ] || myexit 8 $(_ "Écriture impossible sur le fichier") $0
[[ $ROLE == bob ]] && myexit 8 "$(_ "l'opération $arg n'a pas de sens avec")" Bob
ssh-keygen -p -q -m PEM -f $tmp/$SUFFIX &&
mycopyscript $tmp/$SUFFIX < "$0" > $tmp/new &&
echo "$(_ "La passphrase du script") $0 $(_ "a été modifiée")" >&2 &&
exec cat $tmp/new > "$0"


elif [[ $arg == -c ]];then # chiffrement
echo -n "cipher for $(if [[ $ROLE == alice ]];then echo bob; else echo alice; fi)_$SUFFIX:"
[[ $ROLE == bob ]] && lmsg=$LCIP || lmsg=$LSIG
addpayload | (
  head -c$((lmsg+15)) |
  tee >(head -c30 > $tmp/pwd) |
  mycryptrsa       # [1-245]
  mycrypt $tmp/pwd # [246-...]
)


elif [[ $arg == -d ]];then # déchiffrement
read -d ':' && [[ "$REPLY" == "cipher for $myname" ]] || myexit 8 cipher $(_ "inattendu")
( head -c345 |
  mydecryptrsa |
  tee >(head -c30 > $tmp/pwd) # [1-245]
  mydecrypt $tmp/pwd          # [246-...]
) | removepayload


elif [[ $arg == -a ]];then # agent
[[ $ROLE == bob ]] && myexit 8 "$(_ "l'opération $arg n'a pas de sens avec")" Bob
eval "export $SUFFIX=\"$(myprivkey)\""
TMOUT=300 PATH="$(dirname "$0"):$PATH" "${command[@]}"


elif [[ $arg == -u ]];then # update
[ -w "$0" ] || myexit 8 $(_ "Écriture impossible sur le fichier") $0
set -o pipefail &&
wget -O - https://raw.githubusercontent.com/tibolpol/rsa-bob-alice-in-a-simple-script/master/bob_xirap |
mycopyscript $tmp/$SUFFIX  > $tmp/new &&
echo "$(_ "Le script") $0 $(_ "a été mis à jour")" >&2 &&
exec cat $tmp/new > "$0"


else
myexit 8 $(_ "Argument $arg manquant ou incorrect")
fi
